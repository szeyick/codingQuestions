Binary Digits Less than 1

To convert positive integers into binary we usually follow the rule (2^0, 2^1, 2^2 etc). 

This yields, 1, 2, 4, 8, 16 all the way to 256 and beyond. We then divide our positive integer to determine if it fits within the
bits that have been defined.

This works for positive integers that are greater than 1 since the smallest number that we can represent is 2^0, which is 1. So what
happens when the value is less than 1.

For values that are less than 1, we can continue to reduce the exponent (power value) by 1 such as 2^-1, 2^-2 etc etc. It is essentially
the opposite of what we were doing for values larger than 1.

To represent values less than 1, we would start with "." and then perform the normal binary division to determine if the value has the bit
or not.

The algorithm (pseudocode) is as follows -

remainder = value
exponent = -1;
bitCount = 0

while (remainder > 0)
		bitValue = Math.pow(2, exponent) // 2^-1, 2^-2 etc
		if (remainder - bitValue > 0) 
		 	append 1 // This means our bit value fits into our remainder.
		 	remainder = remainder - bitValue
		else
			append 0 
		exponent-- // Update the exponent so we can continue backwards along the bit string.
		bitCount++	// Update the number of its it takes to represent this number.
		
end.

If we print the output as we go we should have something like ".01011110.....". If we want to cap the representation at a certain number
of bits, we can use the bitCount as a counter to terminate.

