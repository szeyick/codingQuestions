Call Centre -

"Imagine you have a call center with three levels of employees: respondent, manager, and director. An incoming telephone
 call must be first allocated to a respondent who is free. If the respondent can't handle the call, he or she must 
 escalate the call to a manager. If the manager is not free or not able to handle it, then the call should be escalated
 to a director. Design the classes and data structures for this problem. Implement a method dispatchCall() which assigns
 a call to the first available employee".
 
Step 1 - Handle Ambiguity

- Sounds like an adaptation of the mediator pattern.
- At least have 3 classes, respondent, manager and director.
	- Respondent (can have multiples)
	- Manager (can have multiple)
	- Director (a single instance)

- A call is passed through each level. If someone cannot handle it, it will be passed on.

Step 2 - Define Core Objects

- Employee : 
	- An abstract class that encompasses the respondent, manager and director classes.
	- Employee can have a respond() method that responds to a call.
	- Employees can have a isBusy() state, when a call is being responded to the employee
	  sets their state to busy so they cannot respond.

- Respondent :
	- Extends the Employee class and implements the respond() method.
	- An employee can respond to a call.
	- If an employee cannot respond to a call, then it can return the call back.
	
-  